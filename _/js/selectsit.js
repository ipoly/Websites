// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  $(function() {
    var Area, AreaMap, SitSelector;
    Area = (function() {

      function Area(data, parent) {
        this.parent = parent;
        this.getSitMap = __bind(this.getSitMap, this);

        this.setSitMap = __bind(this.setSitMap, this);

        this.toggleSitInfo = __bind(this.toggleSitInfo, this);

        this["eval"] = __bind(this["eval"], this);

        data.StageWidth *= 15;
        data.StageHeight *= 15;
        this.el = $("<label title='" + data.Name + "' style='left:" + data.x + "px;top:" + data.y + "px;width:" + data.Width + "px;height:" + data.Height + "px;'>						<input type='radio' name='areaID' value='" + data.ID + "'/>						</label>						");
        if (data.StageWidth) {
          this.stage = $("<span class='stage' style='left:" + data.StageX + "px;top:" + data.StageY + "px;line-height:" + data.StageWidth + "px;height:" + data.StageWidth + "px;width:" + data.StageHeight + "px;'>舞台</span>");
        }
        this.el.data(data);
        this.el.on("click", this.getSitMap);
        this.el.data("model", this);
        this.sitMap = $("<form class='sitMap' action='" + (this.parent.parent.el.attr('action')) + "' method='" + (this.parent.parent.el.attr('method')) + "'>					<h1 class='header5'>						" + data.Name + "						<span>							<button class='btnBlue4'>选择其他区域</button>							<input type='submit' class='btn btnBlue4' value='提交订单'/>						</span>					</h1>					<section/>				</form> ");
        this.totalInfo = $("<div class='totalInfo'/>");
        this.sitMap.append(this.totalInfo);
        this.sitMap.on("click", "label:has(input)", this.toggleSelect);
        this.sitMap.on("hover", "label", this.toggleSitInfo);
        this.sitMap.on("evalTotal", this["eval"]);
        this.sitMap.on("click", function(e) {
          if ($(e.target).is("button")) {
            $(this).detach();
            return false;
          }
        });
      }

      Area.prototype["eval"] = function(e) {
        var i, result, selectData, selectItem, total, _i, _len, _ref;
        total = 0;
        selectItem = $.map(this.sitMap.find(":checked"), function(i) {
          return parseInt($(i).val(), 10);
        });
        selectData = $.map(this.sitData, function(i) {
          var _ref;
          if (_ref = i.ID, __indexOf.call(selectItem, _ref) >= 0) {
            return i;
          }
        });
        _ref = $.map(selectData, function(i) {
          return parseInt(i.Price, 10);
        });
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          i = _ref[_i];
          total += i;
        }
        result = {
          total: total,
          list: selectData
        };
        return this.totalInfo.html(juicer("				<h1>您选中了：</h1>				{$each list as item}				<p class='rank_${item.Rank}'>${item.Rows}排${item.RowNumber}号</p>				{$/each}				<div>共计：${list.length} 项<div>				<div>总价：<b>${total}元</b></div>				", result));
      };

      Area.prototype.findData = function(id) {
        var i, _i, _len, _ref;
        id = parseInt(id, 10);
        _ref = this.sitData;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          i = _ref[_i];
          if (i.ID === id) {
            return i;
          }
        }
      };

      Area.prototype.toggleSitInfo = function(e) {
        var label, sitInfo;
        label = $(e.currentTarget);
        sitInfo = $("#sitInfo");
        if (!sitInfo.length) {
          sitInfo = $("<section id='sitInfo'></section>");
          $("body").append(sitInfo);
        }
        if (e.type === "mouseenter") {
          sitInfo.html(juicer("<h1>座位：${Prefix}${Rows}排 ${RowNumber}号</h1>					 <p>等级：${Rank} </p>					 <p>票价：${PriceName} ${Price}</p>					 <p>状态：{$if Sold}已售{$else}可购{$/if} </p>					", this.findData(label.attr("id"))));
          sitInfo.show();
          return sitInfo.css(label.offset());
        } else {
          return sitInfo.hide();
        }
      };

      Area.prototype.toggleSelect = function(e) {
        var that;
        that = $(this);
        that.toggleClass("selected");
        that.find("input").attr("checked", that.is(".selected"));
        return that.trigger("evalTotal");
      };

      Area.prototype.setSitMap = function(data) {
        var i, n, sits;
        this.sitMap.find(".totalInfo").empty();
        sits = ((function() {
          var _i, _len, _results;
          _results = [];
          for (n = _i = 0, _len = data.length; _i < _len; n = ++_i) {
            i = data[n];
            _results.push("<label id='" + i.ID + "' class='rank_" + i.Rank + " valid_" + i.Valid + " " + (i.Sold ? 'sold_lock' : '') + "' style='left:" + i.x + "px;top:" + i.y + "px;'>				<input type='checkbox' name='sitID' value='" + i.ID + "'/>				</label> ");
          }
          return _results;
        })()).join("");
        this.sitMap.find(".totalInfo").empty();
        this.sitMap.css($(".tab3").offset()).find("section").empty().append(this.stage).append(sits).find(".valid_1 input,.sold_lock input").remove();
        this.sitData = data;
        return $("body").append(this.sitMap);
      };

      Area.prototype.getSitMap = function(e) {
        var tango;
        tango = $(e.target);
        if (this.sitMap.find("label").length) {
          return $("body").append(this.sitMap);
        } else if (tango.is("label")) {
          return $[this.parent.parent.el.attr("method") || "post"](this.parent.parent.el.data("source"), this.el.serializeArray(), this.setSitMap, "json").fail(this.ajaxFail);
        }
      };

      return Area;

    })();
    AreaMap = (function() {

      function AreaMap(data, parent) {
        var _ref;
        this.parent = parent;
        this.el = $("<section class='areaMap'><img src='" + ((_ref = data[0]) != null ? _ref.PlanImage : void 0) + "'/></section>");
        this.areas = [];
        if (data) {
          this.addArea(data);
        }
      }

      AreaMap.prototype.addArea = function(data) {
        var i, newAreas, _i, _len, _results;
        if ($.isArray(data)) {
          newAreas = (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = data.length; _i < _len; _i++) {
              i = data[_i];
              _results.push(new Area(i, this));
            }
            return _results;
          }).call(this);
        } else {
          newAreas = [new Area(data, this)];
        }
        this.areas = this.areas.concat(newAreas);
        _results = [];
        for (_i = 0, _len = newAreas.length; _i < _len; _i++) {
          i = newAreas[_i];
          _results.push(this.el.append(i.el));
        }
        return _results;
      };

      return AreaMap;

    })();
    SitSelector = (function() {

      function SitSelector(el) {
        var areasData;
        this.el = $(el);
        areasData = $.parseJSON(this.el.find("script[type$=json]").html());
        if (areasData) {
          this.areaMap = new AreaMap(areasData, this);
          this.el.append(this.areaMap.el);
        }
      }

      SitSelector.prototype.ajaxFial = function(a, b, c) {
        return $.error(b);
      };

      return SitSelector;

    })();
    return $(".sitSelector").each(function() {
      return new SitSelector(this);
    });
  });

}).call(this);
